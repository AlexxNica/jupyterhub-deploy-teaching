---

# An example `hostname` file
#
# Edit this file to customize settings for a particular host.
# Save as `hostname` without the `.example` suffix.

# ---------------------------------------------------
# Required settings
# ---------------------------------------------------

# The base directory of user accounts
home_dir: /home

# Users with administrative privileges
jupyterhub_admin_users:
  - instructor

# Whitelist of jupyterhub users
jupyterhub_users:
  - instructor
  - grader
  - student1
  - student2

# R kernel installation (default: false)
install_r_kernel: false

# bash kernel installation
install_bash_kernel: true

# Secret token for proxy access
# Create token using something like `openssl rand -hex 32` and
# enter between quotation marks below
proxy_auth_token: ''

# nbgrader and formgrade settings (use_nbgrader default: false)
use_nbgrader: false
nbgrader_course_id: mycourse
nbgrader_owner: instructor
nbgrader_base_dir: "{{home_dir}}/{{nbgrader_owner}}/nbgrader/{{nbgrader_course_id}}"
nbgrader_graders:
    - instructor
    - grader
nbgrader_port: 5005

# The API token formgrader will use to make Hub requests
# Create using something like `openssl rand -hex 32` and
# enter between quotation marks below
formgrader_hubapi_token: ''

# Path of the Python 2.7 interpreter on the remote server
# Note: Ansible requires Python 2.7 for provisioning so the path must be set
ansible_python_interpreter: '/usr/bin/python2.7'

# ---------------------------------------------------
# Optional settings
# ---------------------------------------------------

# To mount local file systems populate this list. (Optional)
# This adds add the entries to /etc/fstab, creates the mount points,
# and mounts them. Note: Disks must be partitioned and formatted.
local_mounts: []
#   - name: /mountpoint1
#     src: /dev/sdb1
#     fstype: ext3
#   - name: /mountpoint2
#     src: /dev/sdc1
#     fstype: ext3

# SSL using letsencrypt (optional - use letsencrypt default: false)
# If using letsencrypt to generate SSL key/cert, set `use_letsencrypt` to `true`
# Otherwise if not using letsencrypt for SSL, you MUST put your key and cert into the security directory as
# `security/ssl.crt` and `security/ssl.key`
use_letsencrypt: false
letsencrypt_email: ''

# If users should have `/public_html/username` directories, set this to `true` (Optional)
nginx_public_html: false

# List of the GitHub usernames who will receive root access via ssh
# Public GitHub SSH keys will be installed to allow the user to ssh into the server as root.
github_usernames: ['instructor', 'grader']

# Cull idle servers (Optional)
# Enable or disable cull idle single user servers
use_cull_idle_servers: false
# The username for culling idle servers. MUST be a user of JupyterHub,
# as root won't work unless root can access JupyterHub
cull_idle_servers_owner: instructor
# The API token for culling, create using something like `openssl rand -hex 32`
cull_idle_servers_hubapi_token: ''
# The interval (in seconds) for checking for idle servers to cull
cull_every: 600
# The idle timeout (in seconds)
cull_timeout: 3600

# Set Google Analytics Tracking ID (Optional)
ga_tracking_id: ''

# Set NewRelic license key (Optional)
newrelic_license_key: ''

# Oauth (Optional - use oauth default: false)
# Change `use_oauth` to `true` and set the other values appropriately
# to enable GitHub OAuth.
# If left as default `false`, PAM authentication will be used.
use_oauth: false
oauth_callback_url: https://mydomain.org/hub/oauth_callback
oauth_client_id: ''
oauth_client_secret: ''

# Set user-friendly codename of installed ubuntu version. (Optional - Needed when using R)
# This codename is used to setup the R apt repositories
ubuntu_codename: wily
